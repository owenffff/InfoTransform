# ============================================================================
# Development Dockerfile for InfoTransform
# ============================================================================
# Optimized development environment with hot-reloading for both frontend
# and backend code changes, with improved layer caching.

FROM python:3.11.3-slim-bookworm

# Install system dependencies (include ca-certificates for TLS)
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    build-essential \
    ffmpeg \
    libmagic1 \
    poppler-utils \
    libreoffice \
    && rm -rf /var/lib/apt/lists/*

# Optional: Add corporate root CA and trust it
# Place your certificate at certs/corporate-ca.crt in the repository
# If you don't have a corporate CA, this step is skipped gracefully
COPY certs/corporate-ca.crt /usr/local/share/ca-certificates/corporate-ca.crt 2>/dev/null || true
RUN update-ca-certificates || true

# Install UV package manager using pip (more reliable in corporate environments)
# Fallback to curl method if pip install fails
RUN pip install uv || curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.cargo/bin:$PATH"

# Install Node.js for Next.js frontend
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get update \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy and install Python dependencies first (better caching)
COPY pyproject.toml uv.lock ./
RUN uv sync

# Copy and install Node.js dependencies (better caching)
COPY frontend/package*.json ./frontend/
RUN cd frontend && npm install

# Copy application code
# Note: In development, source code is typically mounted as volumes
# This COPY ensures the container can run standalone if needed
COPY . .

# Create necessary directories for application data
RUN mkdir -p data/uploads data/temp_extracts logs

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=development
ENV PORT=8000
ENV FRONTEND_PORT=3000
ENV PATH="/app/.venv/bin:$PATH"

# Expose application ports
EXPOSE 8000 3000

# Copy and set up entrypoint script
COPY docker-entrypoint-dev.sh /app/docker-entrypoint-dev.sh
RUN chmod +x /app/docker-entrypoint-dev.sh

# Use development entrypoint script to start both services with hot-reload
ENTRYPOINT ["/app/docker-entrypoint-dev.sh"]
